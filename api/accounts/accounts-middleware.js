const account = require("./accounts-model.js");
exports.checkAccountPayload = () => {
  // Accounts Schema:
  // id - unsigned integer - primary key, auto-increments, generated by database
  // name - string - required - unique
  // budget - numeric - required
  return (req, res, next) => {
    if (!req.body) {
      res.status(400).json({ message: "Input required" });
    }
    if (!req.body.name || !req.body.budget) {
      return res.status(400).json({
        message: "name and budget are required",
      });
    }
    if (typeof req.body.name !== "string" || req.body.name === "") {
      return res.status(400).json({
        message: "name of account must be a string",
      });
    }
    if (100 < req.body.name.trim < 3) {
      return res.status(400).json({
        message: "name of account must be between 3 and 100 characters.",
      });
    }
    if (isNaN(req.body.budget)) {
      return res.status(400).json({
        message: "budget of account must be a number.",
      });
    }
    if (1000000 < req.body.budget < 0) {
      return res.status(400).json({
        message: "budget of account must be over $0 and under $1million",
      });
    }
    next();
  };
};

exports.checkAccountNameUnique = async (req, res, next) => {
  try {
    const accountName = await req.accounts.map(
      (account) => account.name == req.body.name
    );
    if (accountName) {
      res.status(400).json({ message: "That name is already taken." });
    }
  } catch (err) {
    next(err);
  }
};

exports.checkAccountId = async (req, res, next) => {
  const account = req.accounts.map((account) => account.id == req.params.id);
  if (!account) {
    res.status(400).json({ message: "account not found" });
  } else {
    req.accountInfo = account;
    next();
  }
};
